---
import { getRelativeLocaleUrl } from "astro:i18n";
import { languages } from "@/i18n/ui";
import DropdownLanguageSwitcher from "./DropdownLanguageSwitcher.tsx";

const currentLang = Astro.currentLocale || "en";
const pathname = Astro.url.pathname;

const REPO_SLUG = import.meta.env.BASE_URL
  ? import.meta.env.BASE_URL.replace(/^\/+|\/+$/g, "")
  : "";

const LOCALES = Object.keys(languages) as Array<keyof typeof languages>;

function computeRel(path: string) {
  // Remove leading/trailing slashes, split by '/', filter out empty segments
  const segs = path
    .replace(/^\/+|\/+$/g, "")
    .split("/")
    .filter(Boolean);
  let i = 0;

  // If first segment is repo slug, skip it
  if (segs[i] === REPO_SLUG) i++;

  // If next segment is a locale, skip it
  if (segs[i] && LOCALES.includes(segs[i] as (typeof LOCALES)[number])) i++;

  return segs.slice(i).join("/");
}

const rel = computeRel(pathname);

// If rel is empty, it means the root page
const languageUrls = Object.fromEntries(
  Object.keys(languages).map((lang) => [
    lang,
    rel ? getRelativeLocaleUrl(lang, rel) : getRelativeLocaleUrl(lang),
  ]),
);
---

<DropdownLanguageSwitcher
  currentLang={currentLang}
  languages={languages}
  languageUrls={languageUrls}
  client:load
/>