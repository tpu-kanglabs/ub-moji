---
import { getRelativeLocaleUrl } from "astro:i18n";
import { languages } from "@/i18n/ui";
import { computeRel } from "@/lib/utils";
import DropdownLanguageSwitcher from "./DropdownLanguageSwitcher.tsx";

const currentLang = Astro.currentLocale || "en";
const pathname = Astro.url.pathname;

const REPO_SLUG = import.meta.env.BASE_URL
  ? import.meta.env.BASE_URL.replace(/^\/+|\/+$/g, "")
  : "";

const LOCALES = Object.keys(languages) as Array<keyof typeof languages>;

const rel = computeRel(pathname, REPO_SLUG, LOCALES);

// If rel is empty, it means the root page
const languageUrls = Object.fromEntries(
  Object.keys(languages).map((lang) => [
    lang,
    rel ? getRelativeLocaleUrl(lang, rel) : getRelativeLocaleUrl(lang),
  ]),
);
---

<DropdownLanguageSwitcher
  currentLang={currentLang}
  languages={languages}
  languageUrls={languageUrls}
  client:load
/>