---
import Footer from "@/components/Footer.astro";
import Header from "@/components/Header/index.astro";
import NewsCard from "@/components/News/NewsCard.astro";
import { useTranslations } from "@/i18n/utils";
import Layout from "@/layouts/Layout.astro";

const lang = Astro.currentLocale || "en";
const t = useTranslations(lang as "en" | "ja");

type Post = {
  frontmatter: {
    pubDate?: string | Date;
    date?: string | Date;
    title?: string;
    description?: string;
    tags?: string[];
  };
  url: string;
};

const posts = (await Astro.glob("./news/*.md")) as unknown as Post[];

const sorted = posts.sort((a, b) => {
  const ad = new Date(
    a.frontmatter.pubDate || a.frontmatter.date || 0,
  ).getTime();
  const bd = new Date(
    b.frontmatter.pubDate || b.frontmatter.date || 0,
  ).getTime();
  return bd - ad;
});

const fmt = new Intl.DateTimeFormat(lang as string, {
  year: "numeric",
  month: "short",
  day: "2-digit",
});
---

<Layout>
  <Header />

  <main class="container mx-auto px-4 py-10">
    <h1 class="text-3xl font-bold tracking-tight text-gray-900 mb-6">{t('news.title')}</h1>
    <p class="text-gray-600 mb-6">{t('news.description')}</p>

    {sorted.length === 0 ? (
      <p class="text-gray-600">{t('news.empty')}</p>
    ) : (
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {sorted.map((post) => {
          const d = post.frontmatter.pubDate || post.frontmatter.date;
          const iso = d ? String(d) : undefined;
          const label = d ? fmt.format(new Date(d)) : undefined;
          return (
            <NewsCard
              url={post.url}
              title={post.frontmatter.title || ""}
              description={post.frontmatter.description}
              dateISO={iso}
              dateLabel={label}
              tags={post.frontmatter.tags as string[] | undefined}
            />
          );
        })}
      </div>
    )}
  </main>

  <Footer />
</Layout>
