---
import { getRelativeLocaleUrl } from "astro:i18n";
import Footer from "@/components/Footer.astro";
import Header from "@/components/Header/index.astro";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import Layout from "@/layouts/Layout.astro";
import { useTranslations } from "@/lib/i18n";
import { DEFAULT_LOCALE, type Locale, isLocale } from "@/lib/locales";
import {
  type NewsEntry,
  generatePathsFromEntries,
  getNewsCollection,
} from "@/lib/news";

export async function getStaticPaths() {
  // Get all news entries from Content Collections
  const allEntries = await getNewsCollection();

  return generatePathsFromEntries(allEntries);
}

const raw: string | undefined = Astro.params.lang;
const lang: Locale = isLocale(raw) ? raw : DEFAULT_LOCALE;
const t = useTranslations(lang);
const { post }: { post: NewsEntry } = Astro.props;

const { Content } = await post.render();
---

<Layout>
  <Header />

  <main class="container mx-auto max-w-3xl px-4 py-10 min-h-screen">
    <nav class="mb-6">
      <Button variant="outline" asChild>
        <a href={getRelativeLocaleUrl(lang as "en" | "ja", "news")}>
          ‚Üê {t("news.backToList")}
        </a>
      </Button>
    </nav>

    <div class="mb-8">
      {post?.data?.title && (
        <h1 class="text-3xl font-bold tracking-tight text-gray-900 mb-3">
          {post.data.title}
        </h1>
      )}

      <div class="flex items-center gap-3 flex-wrap">
        {post?.data?.pubDate && (
          <Badge variant="secondary" asChild>
            <time datetime={String(post.data.pubDate)}>
              {new Intl.DateTimeFormat(lang, {
                year: "numeric",
                month: "long",
                day: "2-digit",
              }).format(new Date(post.data.pubDate))}
            </time>
          </Badge>
        )}

        {Array.isArray(post?.data?.tags) && post.data.tags.length > 0 && (
          <div class="flex flex-wrap gap-2">
            {post.data.tags.map((tag) => (
              <Badge variant="outline">{tag}</Badge>
            ))}
          </div>
        )}
      </div>

      {post?.data?.description && (
        <p class="mt-4 text-gray-700">{post.data.description}</p>
      )}
    </div>

    <article
      class="
        md-content
        prose prose-lg max-w-none
        prose-headings:tracking-tight
        prose-h1:text-3xl prose-h2:text-2xl
        prose-p:my-4
        prose-img:rounded-xl
        prose-a:no-underline hover:prose-a:underline
        prose-figure:my-6
        text-gray-800
      "
    >
      <Content />
    </article>
  </main>

  <Footer />
</Layout>
